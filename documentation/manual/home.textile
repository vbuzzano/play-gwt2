h1. <a>Play GWT2 Module Version 1.8</a>

p.  Play GWT2 1.8 provides some classes and commands to simplify the integration of a GWT 2.x.x project/Module in a play application. 
 
This module has been tested with play 1.2.3 and gwt 2.2.x and 2.3.x, but has not been tested yet with 2.4.0. If someone has tested 2.4.0, let me know.

p. New in version 1.8
 * Rewrite play shell commands. 
 * add create new project --with gwt2. 
 * add Security lib (example will come in next version)
 * fix lot of small bug.
 
p. New in version 1.7
 * Add gwt2chat sample. This the Chat Sample from Play! 1.2 but GWT. 3 modules. refresh, long polling and websocket	
 * Add GWT2WSClient, a simple client to use with Play! Websocket.
 * Add gwt.codesvr to url when in dev mode. Only for GET request. the plugin redirect the request with gwt.codesvr argument. 

p. New in version 1.6
 * Add GWT2SercieAsync annotation to define if a GWT2Service need to be invoked asyncron as aJob
 * Add GWT2Chain concept to enable no async service to run Promise/Future/Job async with a callback. With this you can start as many future as you want without blocking the service thread
 * Add new Async Sample
 * Improve errors handling
 * some bug fixes
         
h2. <a>Start a new project</a>

p. 1. Create a new Play! application 

bc. > play new myGwt2App --with gwt2 

p. 2. Go to your application

bc. > cd myGwt2App

p. Test your application:

bc. play run

p. and in another terminal:

bc. play gwt2:devmode 


      
h2. <a>Init a existing play project</a>

p. . Go to your application

bc. > cd myApp

p. 5. Edit <myApp>/conf/dependencies.yml files, and add gwt2 module:

bc. ~# Application dependencies
~require:
~    - play
~    - play -> gwt2 1.8

p. 6. Install GWT2 module.

bc. > play install gwt2

TIPS: Skip the previous command if you want to install the module directly in the "modules" folder of your application.
 
p. 7. execute the next command to add the module to your play application 

bc. > play deps
 
h2. <a>Initialize you Application</a> 
 
bc. play gwt2:init

p. this will
 - create a folder in your application : myApp/app/gwt (directory for gwt modules)
 - create a folder in your application : myApp/gwt-public (directory for GWT compiled resources)
 - and copy gwt-user.jar to myApp/lib
 - Add a default App.gwt.xml in your myApp

if you want to change the get path for your gwt modules, edit the conf/application.conf file and add theese lines

then you can set a personal folder to use

if you want to manage the gwt-user.jar with play dependencies, add gwt-user to your play dependencies file.

bc. ~# Application dependencies
~require:
~    - play
~    - play -> gwt2 1.8
~    - com.google -> gwt-user 2.3.0
~    - com.google -> gwt-dev 2.3.0

Remove lib/gwt-user.jar and lib/gwt-dev.jar

bc. > rm lib/gwt-user.jar
 > rm lib/gwt-dev.jar

then run "play deps" again

bc. > play deps


h2. <a>Update your route file</a>

Update your route file to add gwt2 dynamic routing

bc. *		/      module:gwt2


h2. <a>GWT2 configuration</a>

if you want to change the path for you